vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap11")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
# Carregando o pacote readr
library(readr)
# Carregando o dataset
carros <- read_csv("~/Cursos/DSA/FCD/Scripts/Arquivos-Cap11/carros-usados.csv")
# Resumo dos dados
View(carros)
str(carros)
# Resumo dos dados
View(carros)
summary(carro$ano)
summary(carros$ano)
summary(carros[c('preco', 'Kilometragem')])
summary(carros[c('preco', 'kilometragem')])
# Usando as funções
mean(carros$preco)
median(carros$preco)
quantile(carros$preco)
quantile(carros$preco, probs = c(0.01, 0.99))
quantile(carros$preco, seq(from = 0, to = 1, by = 0.20))
IQR(carros$preco) # Diferença entre Q3 e Q1
range(carros$preco)
diff(range(carros$preco))
boxplot(carros$preco, main = "Histograma para os Preços Carros Usados", ylab  ="Preço (R$)")
boxplot(carros$preco, main = "BoxPlot para os Preços Carros Usados", ylab  = "Preço (R$)")
boxplot(carros$kilometragem, main = "Box para a km de Carros Usados ", ylab = "kilometragem (R$)")
hist(carros$preco, main = "Histograma para os Preços Carros Usados", ylab = "Preço (R$)")
boxplot(carros$preco, main = "BoxPlot para os Preços Carros Usados", ylab  = "Preço (R$)")
boxplot(carros$kilometragem, main = "BoxPlot para a km de Carros Usados ", ylab = "kilometragem (R$)")
hist(carros$preco, main = "Histograma para os Preços Carros Usados", ylab = "Preço (R$)")
hist(carros$kilometragem, main = "Histograma para a km de Carros Usados", ylab = "kilometragem (R$)")
hist(carros$kilometragem, main = "Histograma para a km de Carros Usados", breaks = 5, ylab = "kilometragem (R$)")
plot(x = carros$kilometragem, y = carros$preco,
main = "Scatterplot - Preço x km",
xlab = "kilometragem",
ylab = "Preço (R$)")
var(carros$preco)
sd(carros$preco)
var(carros$kilometragem)
sd(carros$kilometragem)
?table
str(carros)
table(carros$cor)
table(carros$cor)
table(carros$modelo)
str(carros)
# Calculando a proporção de cada categoria
model_table <- table(carros$modelo)
prop.table(model_table)
model_table <- prop.table(model_table) * 100
round(model_table, digits = 1)
head(carros)
carros$conserv <- carros$cor %in% c("Preto", "Cinza", "Prata", "Branco")
head(carros)
# Checando a variável
table(carros$conserv)
# Verificando o relacionamento entre 2 variáveis categóricas
# Criando uma crosstable
# Tabelas de contingência fornecem uma maneira de exibir
# as frequências e frequências relativas de observações
# (lembra do capítulo de Estatística?), que são classificados
# de acordo com duas variáveis categóricas. Os elementos de
# uma categoria são exibidas através das colunas;
# os elementos de outra categoria são exibidas sobre as linhas.
install.packages("gmodels")
library(gmodels)
?CrossTable
CrossTable(x = carros$modelo, y = carros$conserv)
CrossTable(x = carros$modelo, y = carros$conserv, chisq = T)
chisq.test(x = carros$modelo, y = carros$conserv)
# Sair
q()
