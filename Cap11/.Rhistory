vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap11")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
# Criando os dados
alturas = c(176, 154, 138, 196, 132, 176, 181, 169, 150, 175)
pesos = c(82, 49, 53, 112, 47, 69, 77, 71, 62, 78)
plot(alturas, pesos, pch = 16, cex = 1.3, col = 'blue',
main = "Altura x Peso",
ylab = "Peso Corporal (kg)",
xlab = "Altura (cm)")
plot(alturas, pesos, pch = 16, cex = 1.3, col = 'blue',
main = "Altura x Peso",
ylab = "Peso Corporal (kg)",
xlab = "Altura (cm)")
# Crie o modelo de regressão
modelo <- lm(pesos ~ alturas)
# Visualizando o modelo
modelo
# Gere a linha de regressão
abline(-70.4627, 0.8528)
summary(modelo)
# Faça as previsões de pesos com base na nova lista de alturas(NUNCA vista pelo modelo)
alturas2 = data.frame(c(179, 152, 134, 197, 131, 178, 185, 162, 155, 172))
previsao <- predict(modelo, alturas2)
previsao
# Plot com dados originais
plot(alturas, pesos, pch = 16, cex = 1.3, col = 'blue',
main = "Altura x Peso",
ylab = "Peso Corporal (kg)",
xlab = "Altura (cm)")
# Construindo a linha de regressão
abline(lm(pesos ~ alturas))
# Obtendo o tamanho de uma das amostras de dados
num <- length(alturas)
num
lines(c(alturas[k], alturas[k]),
c(pesos[k], pesos[k]))
# Gerando um gráfico com os valores residuais
for (k in 1: num)
lines(c(alturas[k], alturas[k]),
c(pesos[k], pesos[k]))
# Gerando gráficos com a distribuição dos resíduos
par(mfrow = c(2,2))
plot(modelo)
