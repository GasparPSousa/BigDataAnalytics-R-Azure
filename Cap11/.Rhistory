vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap11")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
## Explorando e preparando os dados
letters <- read.csv("~/Cursos/DSA/FCD/Scripts/Arquivos-Cap11/letterdata.csv")
View(letters)
# Criando dados de treino e dados de teste
letters_treino <- letters[1:16000, ]
letters_teste <- letters[16001:20000, ]
# Treinamento do modelo
install.packages("kernlab")
library(kernlab)
View(letters)
# Criando o modelo com o kernel vanilladot
letters_classifier <- ksvm(letter ~ ., data = letters_treino, kernel = "vanilladot")
str(letters)
# Criando o modelo com o kernel vanilladot
letters$letter <- as.factor(letters$letter)
str(letters)
letters_classifier <- ksvm(letter ~ ., data = letters_treino, kernel = "vanilladot")
# Criando dados de treino e dados de teste
letters_treino <- letters[1:16000, ]
letters_teste <- letters[16001:20000, ]
letters_classifier <- ksvm(letter ~ ., data = letters_treino, kernel = "vanilladot")
# Visualizando o modelo
letters_classifier
# Avaliando a performance do modelo
letter_predictions <- predict(letters_classifier, letters_teste)
head(letter_predictions)
table(letter_predictions, letters_teste$letter)
# Criando um vetor de TRUE/FALSE indicando previsoes corretas/incorretas
agreement <- letter_predictions == letters_teste$letter
table(agreement)
prop.table(table(agreement))
# Otimizando o modelo
set.seed(12345)
# Recriando o modelo com outro tipo de kernel
letters_classifier_rbf <- ksvm(letter ~ ., data == letters_treino, kernel = 'rfbdot')
# Recriando o modelo com outro tipo de kernel
letters_classifier_rbf <- ksvm(letter ~ ., data == letters_treino, kernel = "rbfdot")
letter_classifier_rbf <- ksvm(letter ~ ., data = letters_treino, kernel = "rbfdot")
# Recriando o modelo com outro tipo de kernel
letters_classifier_rbf <- ksvm(letter ~ ., data = letters_treino, kernel = "rbfdot")
# Novas Previsões
letter_predictions_rbf <- predict(letter_predictions_rbf, letters_teste)
# Novas Previsões
letter_predictions_rbf <- predict(letters_predictions_rbf, letters_teste)
# Novas Previsões
letter_predictions_rbf <- predict(letters_classifier_rbf, letters_teste)
# Compare os resultados com a primeira versao do modelo
agreement_rbf <- letter_predictions_rbf == letters_teste$letter
table(agreement_rbf)
prop.table(table(agreement_rbf))
# Sair
q()
