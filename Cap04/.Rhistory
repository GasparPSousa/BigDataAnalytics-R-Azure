vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap04")
getwd()
search()
search()
# Instala e carrega o pacote
install.packages('lattice')
library(lattice)
# ScatterPlot com Lattice
xyplot(data = iris, groups = Species, Sepal.Length ~ Petal.Length)
# ScatterPlot com Lattice
View(iris)
barchart(class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2),
scales = list(x = "free"))
# Contagem de elementos
PetalLength <- equal.count(iris$Petal.Length, 4)
PetalLength
# ScatterPlots
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris)
# ScatterPlots
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris)
panel.grid(h = -1, v = -1, col.line = "skyblue")
panel.abline(mylm)
mylm <- lm(y~x)
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
mylm <- lm(y~x)
panel.abline(mylm)
})
histogram(~Sepal.Length | Species, xlab = "",
data = iris, layout=c(3,1), type = "density",
main = "Histograma Lattice", sub = "Iris Dataset, Sepal Length")
# Distribuição dos dados
qqmath(~Sepal.length | Species, data = iris, distribution = qunif)
# Distribuição dos dados
qqmath(~Sepal.Length | Species, data = iris, distribution = qunif)
# Boxplot
bwplot(Species~Sepal.Length, data = iris)
# ViolinPlot
bwplot(Species~Sepal.Length, data = iris,
panel = panel.violin)
# Sair
q()
