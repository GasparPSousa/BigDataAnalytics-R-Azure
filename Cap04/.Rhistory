vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap04")
getwd()
search()
# Exercicio 1 - Crie uma função que receba os dois vetores abaixo como parâmetro,
# converta-os em um dataframe e imprima no console
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
df <- data.frame(vec1, vec2)
df
# Exercicio 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com
# números inteiros e calcule a média de cada linha
mat = matrix(c(1:16),nrow = 4, ncol = 4, byrow = T)
mat
?apply
apply(mat, 1, mean)
mat1
mat1 = matrix(c(1:16),nrow = 4, ncol = 4, byrow = F)
mat1
apply(mat1, 1, mean)
# Exercicio 3 - Considere o dataframe abaixo.
# Calcule a média por disciplina e depois calcule a média de apenas uma disciplina
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
escola
lista <- list(1, 3, 5)
?sapply
sapply(lista, sum)
?sapply
lapply(lista, sum)
?lapply
apply(lista, sum)
l
?apply
lapply(lista, sum, simplify = TRUE)
lapply(lista, sum, simplify = TRUE)
lista <- list(1, 3, 5)
lapply(lista, sum, simplify = TRUE)
lista <- list(1, 3, 5)
View(lista)
View(mat)
lista
lista <- list(1, 3, 5)
lapply(lista, sum, simplify = TRUE)
escola
escala$Matematica
escola$Matematica
escola$Media = NA
escola
escola$Media = apply(escola[, c(2, 3, 4)], 1, mean)
escola
escola$MediaPorDisciplica = NA
escola
escola$MediaPorDisciplica = apply(escola[, c(2, 3, 4)], 2, mean)
escola$MediaPorDisciplica
escola
escola$MediaPorDisciplica
escola$MediaPorDisciplica2 = NA
escola$MediaPorDisciplica2 = apply(escola[c(2, 3, 4), ], 2, mean)
escola$MediaPorDisciplica = apply(escola[, c(2, 3, 4)], 2, mean)
escola
# Exercicio 3 - Considere o dataframe abaixo.
# Calcule a média por disciplina e depois calcule a média de apenas uma disciplina
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
escola
apply(escola[, c(2, 3, 4)], 2, mean)
escola
apply(escola$Quimica, 2, mean)
apply(escola[, c(2), drop = F], 2, mean)
apply(escola[, c(3), drop = F], 2, mean)
apply(escola[, c(4), drop = F], 2, mean)
# Exercicio 1 - Crie uma função que receba os dois vetores abaixo como parâmetro,
# converta-os em um dataframe e imprima no console
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
df <- data.frame(rbind(x, y))
df <- data.frame(cbind(x, y))
funcao(vec1, vec2)
df = data.frame(rbind(x, y))
funcao(vec1, vec2)
print(df)
funcao(vec1, vec2)
# Exercicio 1 - Crie uma função que receba os dois vetores abaixo como parâmetro,
# converta-os em um dataframe e imprima no console
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
myfunc <- function(x, y) {
df = data.frame(cbinf(x, y))
print(df)
}
funcao(vec1, vec2)
myfunc(vec1, vec2)
# Exercicio 1 - Crie uma função que receba os dois vetores abaixo como parâmetro,
# converta-os em um dataframe e imprima no console
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
myfunc <- function(x, y) {
df = data.frame(cbinf(x, y))
print(df)
}
myfunc(vec1, vec2)
df = data.frame(cbind(x, y))
# Exercicio 1 - Crie uma função que receba os dois vetores abaixo como parâmetro,
# converta-os em um dataframe e imprima no console
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
myfunc <- function(x, y) {
df = data.frame(cbind(x, y))
print(df)
}
myfunc(vec1, vec2)
df <- data.frame(vec1, vec2)
df
lista <- list(1, 3, 5)
lista
do.call(sum, lista)
lista2 <- list(c(2:5), c(1:10), c(125:150))
lista2
do.call(sum, lista2)
# Exercicio 5 - Transforme a lista anterior um vetor
unlist(lista)
unlist(lista2)
gsub("textos", "frases", str)
# Exercicio 6 - Considere a string abaixo. Substitua a palavra "textos" por "frases"
str <- c("Expressoes", "regulares", "em linguagem R",
"permitem a busca de padroes", "e exploracao de textos",
"podemos buscar padroes em digitos",
"como por exemplo",
"10992451280")
gsub("textos", "frases", str)
# Exercicio 7 - Usando o dataset mtcars, crie um gráfico com ggplot do tipo
# scatter plot. Use as colunas disp e mpg nos eixos x e y respectivamente
View(mtcars)
library(ggplot2)
ggplot(mtcars, aes(disp, mpg))
ggplot(mtcars, aes(disp~mpg))
ggplot(mtcars, aes(disp,mpg))
ggplot(mtcars, aes(x = disp, y = mpg))
ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(shape = 1) + geom_smooth(method = lm, color = 'red', se = F)
ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(shape = 1)
ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(shape = 1) + geom_smooth(method = lm, color = 'red', se = F)
barplot(mat1, beside = T)
# Exercicio 8 - Considere a matriz abaixo.
# Crie um bar plot que represente os dados em barras individuais.
mat1 <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
mat1
barplot(mat1, beside = T)
# Exercício 9 - Qual o erro do código abaixo?
data(diamonds)
View(diamonds)
ggplot(data = diamonds, aes(x = price, group = fill, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut)) +
geom_density(adjust = 1.5)
# Exercício 10 - Qual o erro do código abaixo?
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_barplot() +
labs(fill = "cyl")
# Exercício 10 - Qual o erro do código abaixo?
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
ggplot(data = diamonds, aes(x = price, group = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
# Sair
q()
