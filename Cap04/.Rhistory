vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap04")
getwd()
# Lista de pacotes base carregados
search()
library(ggplot2)
# Plotando um gráfico básico com qplot()
data(tips, package = 'reshape2')
View(tips)
qplot(total_bill, tip, data = tips, geom = 'points')
qplot(total_bill, tip, data = tips, geom = 'point')
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
?aes
?mapping
??mapping
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
)
head(modelo_fit)
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darked"
)
ggplot() + camada1 + camada2
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
ggplot() + camada1 + camada2
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
ggplot() + camada1 + camada2 + camada3
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
myplot <- ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
class(myplot)
print(myplot)
png("Grafico8_ggplot2_Scatterplot.png", width = 800, height = 500, res = 72)
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
dev.off()
data = data.frame(cond = rep(c('Obs1', 'Obs2'),
each = 10), var1 = 1:100 +
rnorm(100, sd = 9), var2 = 1:100 +
rnorm(100, sd = 16))
# Plot
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm, color = 'red', se = FALSE)
png("Grafico8_ggplot2_Scatterplot1.png", width = 800, height = 500, res = 72)
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
dev.off()
png("Grafico8_ggplot2_Scatterplot2.png", width = 800, height = 500, res = 72)
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm, color = 'red', se = FALSE)
dev.off()
data = data.frame(grupo = c("A ", "B ", "C ", "D ") ,
valor = c(33, 62, 56, 67),
num_obs = c(100, 500, 459, 342))
data$right = cumsum(data$num_obs) + 30 * c(0:c(nrow(data)-1))
data$left = data$right - data$num_obs
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax =valor, color = grupo, fill = grupo)) +
xlab('Número de Observações') + ylab('Valor')
png("Grafico8_ggplot2_Barplot1.png", width = 800, height = 500, res = 72)
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax =valor, color = grupo, fill = grupo)) +
xlab('Número de Observações') + ylab('Valor')
dev.off()
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax =valor, color = grupo, fill = grupo)) +
xlab('Número de Observações') + ylab('Valor') + main('testando o título')
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax =valor, color = grupo, fill = grupo, main('testando o título'))) +
xlab('Número de Observações') + ylab('Valor')
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax =valor, color = grupo, fill = grupo)) +
xlab('Número de Observações') + ylab('Valor')
head(mtcars)
ggplot(data = mtcars, aes(x = disp, y = mpg)) + geom_point()
ggplot(data = mtcars, aes(x = disp, y = mpg, colour = as.factor(am))) + geom_point()
# No entanto, tambem podemos mapear uma variável contínua à cor dos pontos:
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl)) + geom_point()
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
png("Grafico8_ggplot2_Scatterplot3.png", width = 700, height = 700, res = 72)
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
dev.off()
png("Grafico8_ggplot2_Scatterplot3.png", width = 800, height = 500, res = 72)
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
dev.off()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) + geom_boxplot()
ggplot(mtcars, aes(x = msg), binwidth = 30) + geom_histogram()
ggplot(mtcars, aes(x = mpg), binwidth = 30) + geom_histogram()
ggplot(mtcars, aes(x = as.factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg, colour = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) + geom_boxplot(color = 'blue', fill = 'seagreen4')
ggplot(mtcars, aes(x = mpg)) + geom_histogram() + xlab('Milhas Por Galão') + ylab('Frequência')
ggplot(mtcars, aes(x = mpg)) + geom_histogram() + xlab('Milhas Por Galão') + ylab('Frequência') + main = teste
ggplot(mtcars, aes(x = mpg)) + geom_histogram() + xlab('Milhas Por Galão') + ylab('Frequência') + main('teste')
ggplot(mtcars, aes(x = mpg)) + geom_histogram() + xlab('Milhas Por Galão') + ylab('Frequência') + main ='teste'
ggplot(mtcars, aes(x = mpg), main = 'teste') + geom_histogram() + xlab('Milhas Por Galão') + ylab('Frequência')
ggplot(mtcars, aes(x = mpg)) + geom_histogram() + xlab('Milhas Por Galão') + ylab('Frequência')
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) + geom_bar() + labs(fill = 'cyl')
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) + geom_bar() + labs(fill = 'cyl') + theme(legend.position = 'top')
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) + geom_bar() + guides(fill = F)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(am~.)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(.~am)
install.packages("gridExtra")
library(gridExtra)
search()
data("diamonds")
# Histograma como plot1
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
# ScatterPlot como plot2
plot2 <- qplot(carat, data = diamonds, colour = cut)
# Combina os 2 plots na mesma área
grid.arrange(plot1, plot2, ncol = 1)
data(diamonds)
# Histograma como plot1
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
# ScatterPlot como plot2
plot2 <- qplot(carat, data = diamonds, colour = cut)
# Combina os 2 plots na mesma área
grid.arrange(plot1, plot2, ncol = 1)
# Gráficos de Densidade
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) + geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) + geom_density(adjust = 1.5, alpha = 0.2)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) + geom_density(adjust = 1.5, position = 'fill')
install.packages("reshape2")
install.packages("plotly")
library(reshape2)
library(plotly)
install.packages("plotly")
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
q()
