vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap09")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
# Exercício 1 - Gere 1000 números de uma distribuição normal com média 3 e sd = .25 e grave no objeto chamado x.
x <- rnorm(1000, 3, .25)
# Exercício 2 - Crie o histograma dos dados gerados no item anterior e adicione uma camada com a curva da normal.
hist(x, prob = T, ylim=c(0, 1.80), breaks = 20, main = "Histograma de x")
curve(dnorm(x, 3, 0.25), add = T, col = "red", lwd=1)
# Exercício 3 - Suponha que 80% dos adultos com alergias relatem alívio sintomático com uma medicação específica.
# Se o medicamento é dado a 10 novos pacientes com alergias, qual é a probabilidade de que ele seja
# eficaz em exatamente sete?
dbinom(7, 10, 0.8)
graph <- function(n, p) {
x <- dbinom(0:n, size = n, prob = p)
barplot(x, ylim = c(0, 0.4), names.arg = 0:n,
main=sprintf(paste("Binomial Distribuition(n,p) ", n, p, sep = ',')))
}
graph(10, 0.8)
pnorm(84, mean=72, sd=15.2, lower.tail = F)
#' A taxa de processamento de checkout é igual a uma dividida pelo médio de conclusão da finalização.
#' Por isso, a taxa de processamento de 1/3 de checkouts por minuto.
#' Em seguida, aplicamos a função pexp da distribuição exponencial com taxa = 1/3.
pexp(2, rate = 1/3)
# Exercício 6 - Selecione dez números aleatórios entre um e três.
# Aplicamos a função de geração runif da distribuição uniforme para gerar dez números aleatórios entre um e três.
runif(10, min = 1, max = 3)
ppois(15, lambda = 12, lower = F) # upper tail
ppois(14, lambda = 12) # lower tail
#' Assim a probabilidade de ter 15 ou mais carros cruzando a ponte em um minuto está na
#' cauda superior da função de densidade de probabilidade
ppois(15, lambda = 12, lower = F) # upper tail
dbinom(4, size = 12, prob = 0.2)
dbinom(0, size = 12, prob = 0.2) +
dbinom(1, size = 12, prob = 0.2) +
dbinom(2, size = 12, prob = 0.2) +
dbinom(3, size = 12, prob = 0.2) +
dbinom(4, size = 12, prob = 0.2)
#' Ou então:
pbinom(4, size = 12, prob = 0.2)
# Sair
q()
