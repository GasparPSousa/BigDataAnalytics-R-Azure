vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap05")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
# Exercicio 1 - Encontre e faça a correção do erro na instrução abaixo:
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = N, qmethod = "double")
mtcars
# Exercicio 2 - Encontre e faça a correção do erro na instrução abaixo:
library(readr)
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
write.table(mtcars, file = "mtcars2.txt", sep = "|", col.names = NA, qmethod = "double")
?read_csv
vignette("readr")
df_iris <- read_csv("iris.csv", col_types = cols(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = matrix(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(1),
Sepal.Width = col_double(1),
Petal.Length = col_double(1),
Petal.Width = col_double(1),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = cols(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = cols(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
df_iris <- read_csv("iris.csv", col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c("setosa", "versicolor", "virginica"))
))
# Dados aleatórios
dataset1=rnorm(4000 , 100 , 30)
dataset2=rnorm(4000 , 200 , 30)
# Histogramas
par(mfrow=c(1,2))
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="Altura" , ylab="Peso" , main="" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab="Altura" , ylab="Peso" , main="")
legend("topright", legend = c("Dataset 1", "Dataset 2"), col = c(rgb(1, 0, 0, 0.5),
rgb(0, 0, 1, 0.5)), pt.cex = 2, pch = 15)
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="height" , ylab="nbr of plants" , main="distribuition" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , add = T)
legend("topright", legend = c("Dataset 1", "Dataset 2"), col = c(rgb(1, 0, 0, 0.5),
rgb(0, 0, 1, 0.5)), pt.cex = 2, pch = 15)
hist(dataset1, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab="height" , ylab="nbr of plants" , main="distribuition of height of 2 durum wheat varieties" )
hist(dataset2, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , add = T)
legend("topright", legend = c("Dataset 1", "Dataset 2"), col = c(rgb(1, 0, 0, 0.5),
rgb(0, 0, 1, 0.5)), pt.cex = 2, pch = 15)
library(plotly)
# Exercício 4 - Encontre e corrija o erro no gráfico abaixo
install.packages("plotly")
library(plotly)
# Exercício 4 - Encontre e corrija o erro no gráfico abaixo
install.packages("plotly")
library(plotly)
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = Species , marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = ~Species , marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = ~Species , marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = ~Species , marker=list(size=20 , opacity=0.5))
plot_ly(iris,
x = ~Petal.Length,
y = ~Petal.Width,
type="scatter",
mode = "markers" ,
color = ~Species , marker=list(size=20 , opacity=0.5))
# Exercício 5 - Em anexo você encontra o arquivo exercicio5.png. Crie o gráfico que resulta nesta imagem.
head(volcano)
# 3D plot
p = plot_ly(z = volcano, type = "surface")
p
p
library("rjson")
# Exercício 6 - Carregue o arquivo input.json anexo a este script e imprima o conteúdo no console
# Dica: Use o pacote rjson
install.packages("rjson")
library("rjson")
result <- fromJSON(file = "~/Cursos/DSA/FCD/BigDataRAzure/Cap05/input.json")
result <- fromJSON(file = "~/Cursos/DSA/FCD/Scripts/Arquivos-Cap05/input.json")
print(result)
df_json <- as.data.frame(result)
df_json
print(df_json)
class(df_json)
class(result)
# Exercício 8 - Carregue o arquivo input.xml anexo a este script.
# Dica: Use o pacote XML
install.packages("XML")
library("XML")
library("methods")
# Exercício 8 - Carregue o arquivo input.xml anexo a este script.
# Dica: Use o pacote XML
install.packages("XML")
library("methods")
library("XML")
library("XML")
library("methods")
library("XML")
# Exercício 8 - Carregue o arquivo input.xml anexo a este script.
# Dica: Use o pacote XML
install.packages("XML")
# Exercício 8 - Carregue o arquivo input.xml anexo a este script.
# Dica: Use o pacote XML
install.packages("XML")
library("XML")
library("methods")
restultado <- xmlParse(file = "~/Cursos/DSA/FCD/Scripts/Arquivos-Cap05/input.xml")
print(restultado)
# Exercício 9 - Converta o objeto criado no exercício anterior em um dataframe
df_xml < xmlToDataFrame("~/Cursos/DSA/FCD/Scripts/Arquivos-Cap05/input.xml")
# Exercício 9 - Converta o objeto criado no exercício anterior em um dataframe
df_xml <- xmlToDataFrame("~/Cursos/DSA/FCD/Scripts/Arquivos-Cap05/input.xml")
print(df_xml)
class(resultado)
class(restultado)
resultado <- xmlParse(file = "~/Cursos/DSA/FCD/Scripts/Arquivos-Cap05/input.xml")
print(resultado)
class(resultado)
class(df_xml)
View(df_xml)
data <- read.csv("~/Cursos/DSA/FCD/Scripts/Arquivos-Cap05/input.csv")
data
View(data)
# Pergunta 1 - Quantas linhas e quantas colunas tem o objeto resultante em R?
dim(data)
MaiorSalario <- max(data$salary)
MaiorSalario
PessoaComMaiorSalario <- subset(data, salary == max(salary))
PessoaComMaiorSalario
MmiorSalario <- max(data$salary)
maiorSalario <- max(data$salary)
maiorSalario
pessoaComMaiorSalario <- subset(data, salary == max(salary))
pessoaComMaiorSalario
pessoasDepartamentoTI <- subset(data, dept = "IT")
pes
pessoasDepartamentoTI
pessoasDepartamentoTI <- subset(data, dept == "IT")
pessoasDepartamentoTI
fromTISalarioMaiorQue600 <- subset(data, dept == "TI" && salary > 600)
fromTISalarioMaiorQue600
fromTISalarioMaiorQue600 <- subset(data, dept == "TI" & salary > 600)
fromTISalarioMaiorQue600
fromTISalarioMaiorQue600 <- subset(data, dept == "IT" & salary > 600)
fromTISalarioMaiorQue600
q()
