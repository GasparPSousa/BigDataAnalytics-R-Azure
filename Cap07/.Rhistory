vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap07")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
library(readr)
library(dplyr)
# Carregando o dataset
sono_df <- read_csv("~/Cursos/DSA/FCD/Scripts/Arquivos-Cap07/sono.csv")
View(sono_df)
head(sono_df)
class(sono_df)
str(sono_df)
# Função glimpse() pode ser usada no lugar da função str()
glimpse(sono_df)
# Aplicando mutate
glimpse(mutate(sono_df, peso_libras = sono_total / 0.45359237))
# Contagem e histograma
count(sono_df, cidade)
hist(sono_df$sono_total)
# Amostragem
sample_n(sono_df, size = 10)
# Amostragem
sample_n(sono_df, size = 10)
# select()
sleepData <- select(sono_df, nome, sono_total)
head(sleepData)
class(sleepData)
select(sono_df, nome)
select(sono_df, nome:cidade)
select((sono_df, nome:sono_total))
select(sono_df, nome:sono_total)
select(sono_df, nome:sono_total)  # Pega um range das colunas de nome até sono_total
# filter()
filter(sono_df, sono_total > 16)
filter(sono_df, sono_total >= 16, peso >= 80)
# filter()
filter(sono_df, sono_total >= 16)
filter(sono_df, cidade %in% c("Recife", "Curitiba"))
# arrange()
sono_df %>% arrange(cidade) %>% head
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
head
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
head(10)
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
filter(sono_total >= 16)
# desc() - Ordenação em Ordem Decrescente
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, desc(sono_total)) %>%
filter(sono_total >= 16)
# mutate()
head(sono_df)
sono_df %>%
mutate(novo_indice = sono_total / peso,
peso_libras = peso / 0.45359237) %>%
head
# mutate()
head(sono_df)
sono_df %>%
mutate(novo_indice = sono_total / peso) %>%
head
head(sono_df)
sono_df %>%
mutate(novo_indice = sono_total / peso,
peso_libras = peso / 0.45359237) %>%
head
head(sono_df)
sono_df %>%
sumarise(media_sono = mean(sono_total))
sono_df %>%
summarise(media_sono = mean(sono_total))
sono_df %>%
summarise(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total = n())
sono_df %>%
group_by(cidade) %>%
summarise(avg_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total = n())
# Operador: %>%
head(select(sono_df, nome, sono_total))
sono_df %>%
select(nome, sono_total) %>%
gead
sono_df %>%
select(nome, sono_total) %>%
head
sono_df %>%
mutate(novo_indice = round(sono_total * peso)) %>%
arrange(desc(novo_indice)) %>%
select(cidade, novo_indice)
sono_df
# Nosso dataset continua intacto, nada mudou em nosso dataframe.
View(sono_df)
sono_df2 <- sono_df %>%
mutate(novo_indice = round(sono_total * peso)) %>%
arrange(desc(novo_indice)) %>%
select(cidade, novo_indice)
sono_df2
View(sono_df2)
q()
