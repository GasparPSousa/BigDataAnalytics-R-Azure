vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap07")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
# Instalando pacote hflights (Dados de voos de Houston)
install.packages("hflights")
library(hflights)
library(dplyr)
?hflights
# Criando um objeto tbl
?tbl_df
flights <- tbl_df(hflights)
flights2 <- tibble::as_tibble(hflights)
flights2
# Resumindo os dados
str(hflights)
View(flights2)
glimpse(hflights)
# Visualizando como dataframe
data.frame(head(flights2))
# Visualizando como dataframe
data.frame(head(flights2))
# Aplicando filter
filter(flights2, Month == 1, DayofMonth == 1)
# Aplicando filter
filter(flights2, Month == 1, DayofMonth == 1)
filter(flights2, UniqueCarrier == "AA" | UniqueCarrier == "UA")
filter(flights2, UniqueCarrier %in% c("AA", "UA"))
# Select()
select(flights2, Year:DayofMonth, contains("Taxi"), contains("Delay"))
# Organizando os dados
flights2 %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
# Organizando os dados
flights2 %>%
select(UniqueCarrier, DepDelay) %>%
arrange(desc(DepDelay))
flights2 %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance / AirTime*60)
?contains
head(with(flights2, tapply(ArrDelay, Dest, mean, na.rm = T)))
head(aggregate(ArrDelay ~ Dest, flights2, mean))
flights2 %>%
group_by(Month, DayofMonth) %>%
tally(sort = T)
# Sair
q()
