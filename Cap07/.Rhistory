vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap07")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
install.packages("gapminder")
library(plyr)
library(gapminder)
?gapminder
# Split-Apply-Combine
?ddply
df <- ddply(gapminder, ~ continent,
summarise,
max_le = max(lifeExp))
str(df)
head(df)
View(df)
levels(df$continent)
# Split-Apply-Combine
df <- ddply(gapminder, ~ continent,
summarise,
n_unique_countries = length(unique(country)))
df <- ddply(gapminder, ~ continent,
summarise,
max_le = max(lifeExp))
# Split-Apply-Combine
ddply(gapminder, ~ continent,
summarise,
n_unique_countries = length(unique(country)))
# Split-Apply-Combine
ddply(gapminder, ~ continent,
summarise,
n_unique_countries = length(unique(country)))
ddply(gapminder, ~ continent,
function(x) c(n_unique_countries = length(unique(x$country))))
ddply(gapminder, ~ continent,
summarise,
min = min(lifeExp),
max = max(lifeExp),
median = median(gpdPercap))
ddply(gapminder, ~ continent,
summarise,
min = min(lifeExp),
max = max(lifeExp),
median = median(gdpPercap))
# Usando um dataset do ggplot
library(ggplot2)
data(mpg)
str(mpg)
?mpg
View(mpg)
# Trabalhando com um subset do dataset
data <- mpg[, c(1,7:9)]
str(data)
View(data)
ddply(data, .(manufacture),
summarise,
avgcty = mean(cty))
ddply(data, .(manufacturer),
summarise,
avgcty = mean(cty))
# Várias funções em uma única chamada
ddply(data, .(manufacturer),
summarise,
avgcty = mean(cty),
sdccty = sd(cty),
maxhwy = max(hwy))
# Sumarizando os dados pela combinação de variáveis/fatores
ddply(data, .(manufacturer, dry),
summarise,
avgcty = mean(cty),
sdccty = sd(cty),
maxhwy = max(hwy))
# Sumarizando os dados pela combinação de variáveis/fatores
ddply(data, .(manufacturer, drv),
summarise,
avgcty = mean(cty),
sdccty = sd(cty),
maxhwy = max(hwy))
# Sair
q()
