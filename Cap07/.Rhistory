vetor1 <- c(1:20)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:20, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim = c(3, 3, 3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a = matriz1, b = vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
objects()
rm(array1, func1)
objects()
array1 <- array(1:5, dim = c(3, 3, 3))
func1 <- function(x) {
var1 <- x * x
return(var1)
}
q()
str <- c("Expressões", "regulares", "em linguagem R",
"permitem a busca de padrões", "e exploração de textos",
"podemos buscar padrões em dígitos",
"como por exemplo",
"10992451280")
length(str)
str
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
grepl("\\d+", str)
grepl("\\D", str)
gsub("em", "***", str)
gsub("ex", "EX", str, ignore.case = T)
sub("em", "EM", str)
frase <- "Isso é uma string."
regexpr(pattern = "u", frase)
gregexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @???!§$",
"Vamos escrever 14 scripts R")
str2
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
gsub("[[:punct:]]", "", str2)
q()
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("~/Cursos/DSA/FCD/BigDataRAzure/Cap07")
# Para saber qual diretório estou trabalhando
getwd()
# Lista de pacotes base carregados
search()
# Pivot (transposta da Matriz)
mtcars
t(mtcars)
# Reshape
head(iris)
str(iris)
library(lattice)
# Distribuindo os dados verticalmente (long)
?reshape
iris_modif <- reshape(iris,
varying = 1:4,
v.names = "Medidas",
timevar = "Dimensoes",
times = names(iris)[1:4],
idvar = "ID",
direction = "long")
head(iris_modif)
View(iris)
View(iris_modif)
bwplot(Medidas ~ Species | Dimensoes, data = iris_modif)
iris_modif <- reshape(iris,
varying = list(c(1, 3), c(2, 4)),
v.names = c("Comprimento", "Largura"),
timevar = "Parte",
times = c("Sepal", "Petal"),
idvar = "ID",
direction = "long")
iris_modif <- reshape(iris,
varying = 1:4,
v.names = "Medidas",
timevar = "Dimensoes",
times = names(iris)[1:4],
idvar = "ID",
direction = "long")
iris_modif_sp <- reshape(iris,
varying = list(c(1, 3), c(2, 4)),
v.names = c("Comprimento", "Largura"),
timevar = "Parte",
times = c("Sepal", "Petal"),
idvar = "ID",
direction = "long")
head(iris_modif_sp)
head(iris)
head(iris_modif)
head(iris_modif_sp)
View(iris_modif_sp)
xyplot(Comprimento ~ Largura | Species, groups = Parte,
data = iris_modif_sp, auto.key = list(space = "right"))
xyplot(Comprimento ~ Largura | Parte, groups = Species,
data = iris_modif_sp, auto.key = list(space = "right"))
library(reshape2)
# Criando um dataframe
df = data.frame(nome = c("Zico", "Pele"),
chuteira = c(40, 42),
idade = c(34, NA),
peso = c(93, NA),
altura = c(175, 178))
df
# "Derretendo" o dataframe - Função melt()
df_wide = melt(df, id = c("nome", "chuteira"))
df_wide
?melt
# Removendo NA
df_wide = melt(df, id = c("nome", "chuteira"), na.rm = T
# Removendo NA
df_wide = melt(df, id = c("nome", "chuteira"), na.rm = T)
df_wide
# Removendo NA
df_wide = melt(df, id = c("nome", "chuteira"), na.rm = T)
df_wide
# "Esticando" o dataframe
dcast(df_wide, formula = chuteira + nome ~ variable)
dcast(df_wide, formula = nome + chuteira ~ variable)
dcast(df_wide, formula = nome ~ variable)
dcast(df_wide, formula = ... ~ variable)
# Aplicando o reshape2
names(airquality) <- tolower(names(airquality))
head(airquality)
dim(airquality)
df_wide <- melt(airquality)
class(df_wide)
df_wide
head(df_wide)
tail(df_wide)
df_wide <- melt(airquality, id.vars = c("month", "day"))
head(df_wide)
df_wide <- melt(airquality, id.vars = c("month", "day"),
variable.name = "climate_variable",
value.name = "climate_value")
head(df_wide)
# Função dcast() - long
df_wide <- melt(airquality, id.vars = c("month", "day"))
View(df_wide)
df_long <- dcast(df_wide, month + day ~ variable)
View(df_long)
head(airquality)
# Sair
q()
